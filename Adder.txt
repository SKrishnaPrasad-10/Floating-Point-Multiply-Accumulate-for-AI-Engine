module addercombi(
        input_a,
        input_b,
			output_z);

  input     [15:0] input_a;


  input     [15:0] input_b;


  output    reg [15:0] output_z;


  reg [15:0] a,b,z;
  reg [10:0] a_m, b_m,b_m1,a_m1;
  reg       [10:0] z_m,z_m1;
  reg       [5:0] a_e, b_e, z_e,z_e1;
  reg       a_s, b_s, z_s;
  reg      [12:0] sum;



  always @(input_a,input_b)
  begin
  
  //UNPACK
        a = input_a;
        b = input_b;
        a_m = {1'b1,a[9 : 0]};
        b_m = {1'b1,b[9 : 0]};
        a_e = a[14 : 10];
         b_e = b[14 : 10];
         a_s = a[15];
         b_s = b[15];
			
  //ALIGN
	if(a_e>b_e)
	begin
	b_m1=b_m>>(a_e-b_e);
	 b_m=b_m1;
	 z_e = a_e;
	
	end else if(b_e>a_e)
	begin
	a_m1=a_m>>(b_e-a_e);
	 a_m=a_m1;
	 z_e = b_e;
	end
        if (a_s == b_s) begin
           sum = a_m + b_m;
           z_s = a_s;
        end else begin
          if (a_m >= b_m) begin
             sum = a_m - b_m;
             z_s = a_s;
          end else begin
             sum = b_m - a_m;
             z_s = b_s;
          end
        end
  //NORMALISE
        if (sum[10]) begin
           z_m = sum[10:0];
        end else begin
	   z_m = sum[10:0];
		case(sum[10:0])
		11'bxx1xxxxxxxx : begin z_m1=z_m<<1; z_e1=z_e-1; end
		11'bxxx1xxxxxxx : begin z_m1=z_m<<2;  z_e1=z_e-2; end
		11'bxxxx1xxxxxx : begin z_m1=z_m<<3;  z_e1=z_e-3; end
		11'bxxxxx1xxxxx : begin z_m1=z_m<<4;  z_e1=z_e-4; end
		11'bxxxxxx1xxxx : begin  z_m1=z_m<<5;  z_e1=z_e-5; end
		11'bxxxxxxx1xxx : begin  z_m1=z_m<<6;  z_e1=z_e-6; end
		11'bxxxxxxxx1xx : begin  z_m1=z_m<<7;  z_e1=z_e-7; end
		11'bxxxxxxxxx1x : begin  z_m1=z_m<<8;  z_e1=z_e-8; end
		11'bxxxxxxxxxx1 : begin  z_m1=z_m<<9;  z_e1=z_e-9; end
		endcase
	 z_m=z_m1;
	 z_e=z_e1;
        end
         z= {z_s,z_e[4:0],z_m[9:0]};
	if(input_a==16'd0)
	 output_z = input_b;
	else if(input_b==16'd0)
	 output_z = input_a;
	else
	 output_z = z;
 
  end

endmodule
